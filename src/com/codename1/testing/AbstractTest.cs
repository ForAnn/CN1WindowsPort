// Automatically generated by xmlvm2csharp (do not edit).

using org.xmlvm;
namespace com.codename1.testing {
public abstract class AbstractTest: global::java.lang.Object,global::com.codename1.testing.UnitTest {
public void @this(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void <init>()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    ((global::java.lang.Object) _r0_o).@this();
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void <init>()]
}

public virtual void prepare(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void prepare()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void prepare()]
}

public virtual void cleanup(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void cleanup()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void cleanup()]
}

public virtual int getTimeoutMillis(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: int getTimeoutMillis()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r0.i = 120000;
    return _r0.i;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: int getTimeoutMillis()]
}

public virtual bool shouldExecuteOnEDT(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: boolean shouldExecuteOnEDT()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r0.i = 0;
    return _r0.i!=0;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: boolean shouldExecuteOnEDT()]
}

public virtual void assertBool(bool n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertBool(boolean)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    global::com.codename1.testing.TestUtils.assertBool(0!=_r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertBool(boolean)]
}

public virtual void assertBool(bool n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertBool(boolean, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertBool(0!=_r1.i, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertBool(boolean, java.lang.String)]
}

public virtual void fail(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void fail()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    global::com.codename1.testing.TestUtils.fail();
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void fail()]
}

public virtual void fail(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void fail(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.fail((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void fail(java.lang.String)]
}

public virtual void assertTrue(bool n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTrue(boolean)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    global::com.codename1.testing.TestUtils.assertTrue(0!=_r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTrue(boolean)]
}

public virtual void assertTrue(bool n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTrue(boolean, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertTrue(0!=_r1.i, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTrue(boolean, java.lang.String)]
}

public virtual void assertFalse(bool n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertFalse(boolean)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    global::com.codename1.testing.TestUtils.assertFalse(0!=_r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertFalse(boolean)]
}

public virtual void assertFalse(bool n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertFalse(boolean, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertFalse(0!=_r1.i, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertFalse(boolean, java.lang.String)]
}

public virtual void assertNull(global::java.lang.Object n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNull(java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertNull((global::java.lang.Object) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNull(java.lang.Object)]
}

public virtual void assertNull(global::java.lang.Object n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNull(java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertNull((global::java.lang.Object) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNull(java.lang.Object, java.lang.String)]
}

public virtual void assertNotNull(global::java.lang.Object n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotNull(java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertNotNull((global::java.lang.Object) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotNull(java.lang.Object)]
}

public virtual void assertNotNull(global::java.lang.Object n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotNull(java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertNotNull((global::java.lang.Object) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotNull(java.lang.Object, java.lang.String)]
}

public virtual void assertSame(global::java.lang.Object n1, global::java.lang.Object n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertSame(java.lang.Object, java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertSame((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertSame(java.lang.Object, java.lang.Object)]
}

public virtual void assertSame(global::java.lang.Object n1, global::java.lang.Object n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertSame(java.lang.Object, java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertSame((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertSame(java.lang.Object, java.lang.Object, java.lang.String)]
}

public virtual void assertNotSame(global::java.lang.Object n1, global::java.lang.Object n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotSame(java.lang.Object, java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertNotSame((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotSame(java.lang.Object, java.lang.Object)]
}

public virtual void assertNotSame(global::java.lang.Object n1, global::java.lang.Object n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotSame(java.lang.Object, java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertNotSame((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotSame(java.lang.Object, java.lang.Object, java.lang.String)]
}

public virtual void assertEqual(sbyte n1, sbyte n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(byte, byte)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertEqual((sbyte) _r1.i, (sbyte) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(byte, byte)]
}

public virtual void assertEqual(sbyte n1, sbyte n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(byte, byte, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertEqual((sbyte) _r1.i, (sbyte) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(byte, byte, java.lang.String)]
}

public virtual void assertEqual(short n1, short n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(short, short)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertEqual((short) _r1.i, (short) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(short, short)]
}

public virtual void assertEqual(short n1, short n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(short, short, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertEqual((short) _r1.i, (short) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(short, short, java.lang.String)]
}

public virtual void assertEqual(int n1, int n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(int, int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertEqual((int) _r1.i, (int) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(int, int)]
}

public virtual void assertEqual(int n1, int n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(int, int, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertEqual((int) _r1.i, (int) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(int, int, java.lang.String)]
}

public virtual void assertEqual(long n1, long n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(long, long)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.l = n1;
    _r3.l = n2;
    global::com.codename1.testing.TestUtils.assertEqual((long) _r1.l, (long) _r3.l);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(long, long)]
}

public virtual void assertEqual(long n1, long n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(long, long, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.l = n1;
    _r3.l = n2;
    _r5_o = n3;
    global::com.codename1.testing.TestUtils.assertEqual((long) _r1.l, (long) _r3.l, (global::java.lang.String) _r5_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(long, long, java.lang.String)]
}

public virtual void assertEqual(float n1, float n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(float, float, double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3.d = n3;
    global::com.codename1.testing.TestUtils.assertEqual((float) _r1.f, (float) _r2.f, (double) _r3.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(float, float, double)]
}

public virtual void assertEqual(float n1, float n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(float, float, double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3.d = n3;
    _r5_o = n4;
    global::com.codename1.testing.TestUtils.assertEqual((float) _r1.f, (float) _r2.f, (double) _r3.d, (global::java.lang.String) _r5_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(float, float, double, java.lang.String)]
}

public virtual void assertEqual(double n1, double n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(double, double, double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.d = n1;
    _r3.d = n2;
    _r5.d = n3;
    global::com.codename1.testing.TestUtils.assertEqual((double) _r1.d, (double) _r3.d, (double) _r5.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(double, double, double)]
}

public virtual void assertEqual(double n1, double n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(double, double, double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.d = n1;
    _r3.d = n2;
    _r5.d = n3;
    _r7_o = n4;
    global::com.codename1.testing.TestUtils.assertEqual((double) _r1.d, (double) _r3.d, (double) _r5.d, (global::java.lang.String) _r7_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(double, double, double, java.lang.String)]
}

public virtual void assertEqual(global::java.lang.Object n1, global::java.lang.Object n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(java.lang.Object, java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertEqual((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(java.lang.Object, java.lang.Object)]
}

public virtual void assertEqual(global::java.lang.Object n1, global::java.lang.Object n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(java.lang.Object, java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertEqual((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertEqual(java.lang.Object, java.lang.Object, java.lang.String)]
}

public virtual void assertNotEqual(sbyte n1, sbyte n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(byte, byte)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertNotEqual((sbyte) _r1.i, (sbyte) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(byte, byte)]
}

public virtual void assertNotEqual(sbyte n1, sbyte n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(byte, byte, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertNotEqual((sbyte) _r1.i, (sbyte) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(byte, byte, java.lang.String)]
}

public virtual void assertNotEqual(short n1, short n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(short, short)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertNotEqual((short) _r1.i, (short) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(short, short)]
}

public virtual void assertNotEqual(short n1, short n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(short, short, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertNotEqual((short) _r1.i, (short) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(short, short, java.lang.String)]
}

public virtual void assertNotEqual(int n1, int n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(int, int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.assertNotEqual((int) _r1.i, (int) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(int, int)]
}

public virtual void assertNotEqual(int n1, int n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(int, int, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    _r2.i = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertNotEqual((int) _r1.i, (int) _r2.i, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(int, int, java.lang.String)]
}

public virtual void assertNotEqual(long n1, long n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(long, long)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r2_o = this;
    _r3.l = n1;
    _r5.l = n2;
    _r0_o = global::java.lang.Long.valueOf((long) _r3.l);
    _r1_o = global::java.lang.Long.valueOf((long) _r5.l);
    global::com.codename1.testing.TestUtils.assertNotEqual((global::java.lang.Object) _r0_o, (global::java.lang.Object) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(long, long)]
}

public virtual void assertNotEqual(long n1, long n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(long, long, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r2_o = this;
    _r3.l = n1;
    _r5.l = n2;
    _r7_o = n3;
    _r0_o = global::java.lang.Long.valueOf((long) _r3.l);
    _r1_o = global::java.lang.Long.valueOf((long) _r5.l);
    global::com.codename1.testing.TestUtils.assertNotEqual((global::java.lang.Object) _r0_o, (global::java.lang.Object) _r1_o, (global::java.lang.String) _r7_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(long, long, java.lang.String)]
}

public virtual void assertNotEqual(float n1, float n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(float, float, double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nElement _r8;
    global::System.Object _r8_o = null;
    global::org.xmlvm._nElement _r9;
    global::System.Object _r9_o = null;
    global::org.xmlvm._nElement _r10;
    global::System.Object _r10_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r6_o = this;
    _r7.f = n1;
    _r8.f = n2;
    _r9.d = n3;
    _r0.d = (double) _r7.f;
    _r2.d = (double) _r8.f;
    _r4.d = _r9.d;
    global::com.codename1.testing.TestUtils.assertNotEqual((double) _r0.d, (double) _r2.d, (double) _r4.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(float, float, double)]
}

public virtual void assertNotEqual(float n1, float n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(float, float, double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nElement _r8;
    global::System.Object _r8_o = null;
    global::org.xmlvm._nElement _r9;
    global::System.Object _r9_o = null;
    global::org.xmlvm._nElement _r10;
    global::System.Object _r10_o = null;
    global::org.xmlvm._nElement _r11;
    global::System.Object _r11_o = null;
    global::org.xmlvm._nElement _r12;
    global::System.Object _r12_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r7_o = this;
    _r8.f = n1;
    _r9.f = n2;
    _r10.d = n3;
    _r12_o = n4;
    _r0.d = (double) _r8.f;
    _r2.d = (double) _r9.f;
    _r4.d = _r10.d;
    _r6_o = _r12_o;
    global::com.codename1.testing.TestUtils.assertNotEqual((double) _r0.d, (double) _r2.d, (double) _r4.d, (global::java.lang.String) _r6_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(float, float, double, java.lang.String)]
}

public virtual void assertNotEqual(double n1, double n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(double, double, double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.d = n1;
    _r3.d = n2;
    _r5.d = n3;
    global::com.codename1.testing.TestUtils.assertNotEqual((double) _r1.d, (double) _r3.d, (double) _r5.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(double, double, double)]
}

public virtual void assertNotEqual(double n1, double n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(double, double, double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.d = n1;
    _r3.d = n2;
    _r5.d = n3;
    _r7_o = n4;
    global::com.codename1.testing.TestUtils.assertNotEqual((double) _r1.d, (double) _r3.d, (double) _r5.d, (global::java.lang.String) _r7_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(double, double, double, java.lang.String)]
}

public virtual void assertNotEqual(global::java.lang.Object n1, global::java.lang.Object n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(java.lang.Object, java.lang.Object)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertNotEqual((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(java.lang.Object, java.lang.Object)]
}

public virtual void assertNotEqual(global::java.lang.Object n1, global::java.lang.Object n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(java.lang.Object, java.lang.Object, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertNotEqual((global::java.lang.Object) _r1_o, (global::java.lang.Object) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNotEqual(java.lang.Object, java.lang.Object, java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<sbyte> n1, global::org.xmlvm._nArrayAdapter<sbyte> n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(byte[], byte[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<sbyte>) _r1_o, (global::org.xmlvm._nArrayAdapter<sbyte>) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(byte[], byte[])]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<sbyte> n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(byte[], byte[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<sbyte>) _r1_o, (global::org.xmlvm._nArrayAdapter<sbyte>) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(byte[], byte[], java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<short> n1, global::org.xmlvm._nArrayAdapter<short> n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(short[], short[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<short>) _r1_o, (global::org.xmlvm._nArrayAdapter<short>) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(short[], short[])]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<short> n1, global::org.xmlvm._nArrayAdapter<short> n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(short[], short[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<short>) _r1_o, (global::org.xmlvm._nArrayAdapter<short>) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(short[], short[], java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<int> n1, global::org.xmlvm._nArrayAdapter<int> n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(int[], int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (global::org.xmlvm._nArrayAdapter<int>) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(int[], int[])]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<int> n1, global::org.xmlvm._nArrayAdapter<int> n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(int[], int[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (global::org.xmlvm._nArrayAdapter<int>) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(int[], int[], java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<long> n1, global::org.xmlvm._nArrayAdapter<long> n2, long n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(long[], long[], long)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r2_o = this;
    _r3_o = n1;
    _r4_o = n2;
    _r5.l = n3;
    _r0.d = (double) _r5.l;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<long>) _r3_o, (global::org.xmlvm._nArrayAdapter<long>) _r4_o, (double) _r0.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(long[], long[], long)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<long> n1, global::org.xmlvm._nArrayAdapter<long> n2, long n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(long[], long[], long, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nElement _r6;
    global::System.Object _r6_o = null;
    global::org.xmlvm._nElement _r7;
    global::System.Object _r7_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r2_o = this;
    _r3_o = n1;
    _r4_o = n2;
    _r5.l = n3;
    _r7_o = n4;
    _r0.d = (double) _r5.l;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<long>) _r3_o, (global::org.xmlvm._nArrayAdapter<long>) _r4_o, (double) _r0.d, (global::java.lang.String) _r7_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(long[], long[], long, java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<float> n1, global::org.xmlvm._nArrayAdapter<float> n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(float[], float[], double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3.d = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<float>) _r1_o, (global::org.xmlvm._nArrayAdapter<float>) _r2_o, (double) _r3.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(float[], float[], double)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<float> n1, global::org.xmlvm._nArrayAdapter<float> n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(float[], float[], double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3.d = n3;
    _r5_o = n4;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<float>) _r1_o, (global::org.xmlvm._nArrayAdapter<float>) _r2_o, (double) _r3.d, (global::java.lang.String) _r5_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(float[], float[], double, java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<double> n1, global::org.xmlvm._nArrayAdapter<double> n2, double n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(double[], double[], double)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3.d = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<double>) _r1_o, (global::org.xmlvm._nArrayAdapter<double>) _r2_o, (double) _r3.d);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(double[], double[], double)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<double> n1, global::org.xmlvm._nArrayAdapter<double> n2, double n3, global::java.lang.String n4){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(double[], double[], double, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nElement _r4;
    global::System.Object _r4_o = null;
    global::org.xmlvm._nElement _r5;
    global::System.Object _r5_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3.d = n3;
    _r5_o = n4;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<double>) _r1_o, (global::org.xmlvm._nArrayAdapter<double>) _r2_o, (double) _r3.d, (global::java.lang.String) _r5_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(double[], double[], double, java.lang.String)]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<global::System.Object> n1, global::org.xmlvm._nArrayAdapter<global::System.Object> n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(java.lang.Object[], java.lang.Object[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<global::System.Object>) _r1_o, (global::org.xmlvm._nArrayAdapter<global::System.Object>) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(java.lang.Object[], java.lang.Object[])]
}

public virtual void assertArrayEqual(global::org.xmlvm._nArrayAdapter<global::System.Object> n1, global::org.xmlvm._nArrayAdapter<global::System.Object> n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(java.lang.Object[], java.lang.Object[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertArrayEqual((global::org.xmlvm._nArrayAdapter<global::System.Object>) _r1_o, (global::org.xmlvm._nArrayAdapter<global::System.Object>) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertArrayEqual(java.lang.Object[], java.lang.Object[], java.lang.String)]
}

public virtual void assertException(global::java.lang.RuntimeException n1, global::java.lang.Runnable n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertException(java.lang.RuntimeException, java.lang.Runnable)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertException((global::java.lang.RuntimeException) _r1_o, (global::java.lang.Runnable) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertException(java.lang.RuntimeException, java.lang.Runnable)]
}

public virtual void assertException(global::java.lang.RuntimeException n1, global::java.lang.Runnable n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertException(java.lang.RuntimeException, java.lang.Runnable, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.assertException((global::java.lang.RuntimeException) _r1_o, (global::java.lang.Runnable) _r2_o, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertException(java.lang.RuntimeException, java.lang.Runnable, java.lang.String)]
}

public virtual void assertNoException(global::java.lang.Runnable n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNoException(java.lang.Runnable)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertNoException((global::java.lang.Runnable) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNoException(java.lang.Runnable)]
}

public virtual void assertNoException(global::java.lang.Runnable n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertNoException(java.lang.Runnable, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertNoException((global::java.lang.Runnable) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertNoException(java.lang.Runnable, java.lang.String)]
}

public virtual void waitFor(int n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void waitFor(int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    global::com.codename1.testing.TestUtils.waitFor((int) _r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void waitFor(int)]
}

public virtual global::System.Object findByName(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Component findByName(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r2_o = n1;
    _r0_o = global::com.codename1.testing.TestUtils.findByName((global::java.lang.String) _r2_o);
    return (global::com.codename1.ui.Component) _r0_o;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Component findByName(java.lang.String)]
}

public virtual global::System.Object findLabelText(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Label findLabelText(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r2_o = n1;
    _r0_o = global::com.codename1.testing.TestUtils.findLabelText((global::java.lang.String) _r2_o);
    return (global::com.codename1.ui.Label) _r0_o;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Label findLabelText(java.lang.String)]
}

public virtual void clickButtonByLabel(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByLabel(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.clickButtonByLabel((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByLabel(java.lang.String)]
}

public virtual void clickButtonByName(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByName(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.clickButtonByName((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByName(java.lang.String)]
}

public virtual void clickButtonByPath(global::org.xmlvm._nArrayAdapter<int> n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByPath(int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.clickButtonByPath((global::org.xmlvm._nArrayAdapter<int>) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void clickButtonByPath(int[])]
}

public virtual void goBack(){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void goBack()]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    global::com.codename1.testing.TestUtils.goBack();
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void goBack()]
}

public virtual void clickMenuItem(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void clickMenuItem(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.clickMenuItem((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void clickMenuItem(java.lang.String)]
}

public virtual void ensureVisible(global::com.codename1.ui.Component n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(com.codename1.ui.Component)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.ensureVisible((global::com.codename1.ui.Component) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(com.codename1.ui.Component)]
}

public virtual void ensureVisible(global::org.xmlvm._nArrayAdapter<int> n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.ensureVisible((global::org.xmlvm._nArrayAdapter<int>) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(int[])]
}

public virtual void ensureVisible(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.ensureVisible((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void ensureVisible(java.lang.String)]
}

public virtual void waitForFormTitle(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void waitForFormTitle(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.waitForFormTitle((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void waitForFormTitle(java.lang.String)]
}

public virtual void waitForFormName(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void waitForFormName(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.waitForFormName((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void waitForFormName(java.lang.String)]
}

public virtual void log(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void log(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.log((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void log(java.lang.String)]
}

public virtual void log(global::java.lang.Throwable n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void log(java.lang.Throwable)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.log((global::java.lang.Throwable) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void log(java.lang.Throwable)]
}

public virtual bool screenshotTest(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: boolean screenshotTest(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r2_o = n1;
    _r0.i = global::com.codename1.testing.TestUtils.screenshotTest((global::java.lang.String) _r2_o) ? 1 : 0;
    return _r0.i!=0;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: boolean screenshotTest(java.lang.String)]
}

public virtual void keyPress(int n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void keyPress(int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    global::com.codename1.testing.TestUtils.keyPress((int) _r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void keyPress(int)]
}

public virtual void keyRelease(int n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void keyRelease(int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    global::com.codename1.testing.TestUtils.keyRelease((int) _r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void keyRelease(int)]
}

public virtual void gameKeyPress(int n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void gameKeyPress(int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    global::com.codename1.testing.TestUtils.gameKeyPress((int) _r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void gameKeyPress(int)]
}

public virtual void gameKeyRelease(int n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void gameKeyRelease(int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1;
    global::com.codename1.testing.TestUtils.gameKeyRelease((int) _r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void gameKeyRelease(int)]
}

public virtual void pointerPress(float n1, float n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerPress(float, float, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerPress((float) _r1.f, (float) _r2.f, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerPress(float, float, java.lang.String)]
}

public virtual void pointerRelease(float n1, float n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerRelease(float, float, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerRelease((float) _r1.f, (float) _r2.f, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerRelease(float, float, java.lang.String)]
}

public virtual void pointerDrag(float n1, float n2, global::java.lang.String n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerDrag(float, float, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerDrag((float) _r1.f, (float) _r2.f, (global::java.lang.String) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerDrag(float, float, java.lang.String)]
}

public virtual void pointerPress(float n1, float n2, global::org.xmlvm._nArrayAdapter<int> n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerPress(float, float, int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerPress((float) _r1.f, (float) _r2.f, (global::org.xmlvm._nArrayAdapter<int>) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerPress(float, float, int[])]
}

public virtual void pointerRelease(float n1, float n2, global::org.xmlvm._nArrayAdapter<int> n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerRelease(float, float, int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerRelease((float) _r1.f, (float) _r2.f, (global::org.xmlvm._nArrayAdapter<int>) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerRelease(float, float, int[])]
}

public virtual void pointerDrag(float n1, float n2, global::org.xmlvm._nArrayAdapter<int> n3){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void pointerDrag(float, float, int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nElement _r3;
    global::System.Object _r3_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.f = n1;
    _r2.f = n2;
    _r3_o = n3;
    global::com.codename1.testing.TestUtils.pointerDrag((float) _r1.f, (float) _r2.f, (global::org.xmlvm._nArrayAdapter<int>) _r3_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void pointerDrag(float, float, int[])]
}

public virtual global::System.Object getComponentByPath(global::org.xmlvm._nArrayAdapter<int> n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Component getComponentByPath(int[])]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r2_o = n1;
    _r0_o = global::com.codename1.testing.TestUtils.getComponentByPath((global::org.xmlvm._nArrayAdapter<int>) _r2_o);
    return (global::com.codename1.ui.Component) _r0_o;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.Component getComponentByPath(int[])]
}

public virtual void setText(global::java.lang.String n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void setText(java.lang.String, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.setText((global::java.lang.String) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void setText(java.lang.String, java.lang.String)]
}

public virtual void setText(global::org.xmlvm._nArrayAdapter<int> n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void setText(int[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.setText((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void setText(int[], java.lang.String)]
}

public virtual void assertTitle(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTitle(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertTitle((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTitle(java.lang.String)]
}

public virtual void assertLabel(global::java.lang.String n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(java.lang.String, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertLabel((global::java.lang.String) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(java.lang.String, java.lang.String)]
}

public virtual void assertLabel(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertLabel((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(java.lang.String)]
}

public virtual void assertLabel(global::org.xmlvm._nArrayAdapter<int> n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(int[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertLabel((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertLabel(int[], java.lang.String)]
}

public virtual void assertTextArea(global::java.lang.String n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(java.lang.String, java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertTextArea((global::java.lang.String) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(java.lang.String, java.lang.String)]
}

public virtual void assertTextArea(global::org.xmlvm._nArrayAdapter<int> n1, global::java.lang.String n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(int[], java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2_o = n2;
    global::com.codename1.testing.TestUtils.assertTextArea((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (global::java.lang.String) _r2_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(int[], java.lang.String)]
}

public virtual void assertTextArea(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    global::com.codename1.testing.TestUtils.assertTextArea((global::java.lang.String) _r1_o);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void assertTextArea(java.lang.String)]
}

public virtual global::System.Object findTextAreaText(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.TextArea findTextAreaText(java.lang.String)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r1_o = this;
    _r2_o = n1;
    _r0_o = global::com.codename1.testing.TestUtils.findTextAreaText((global::java.lang.String) _r2_o);
    return (global::com.codename1.ui.TextArea) _r0_o;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: com.codename1.ui.TextArea findTextAreaText(java.lang.String)]
}

public virtual void setVerboseMode(bool n1){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void setVerboseMode(boolean)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1.i = n1 ? 1 : 0;
    global::com.codename1.testing.TestUtils.setVerboseMode(0!=_r1.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void setVerboseMode(boolean)]
}

public virtual void selectInList(global::java.lang.String n1, int n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void selectInList(java.lang.String, int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.selectInList((global::java.lang.String) _r1_o, (int) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void selectInList(java.lang.String, int)]
}

public virtual void selectInList(global::org.xmlvm._nArrayAdapter<int> n1, int n2){
//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest: void selectInList(int[], int)]
    global::org.xmlvm._nElement _r0;
    global::System.Object _r0_o = null;
    global::org.xmlvm._nElement _r1;
    global::System.Object _r1_o = null;
    global::org.xmlvm._nElement _r2;
    global::System.Object _r2_o = null;
    global::org.xmlvm._nExceptionAdapter _ex = null;
    _r0_o = this;
    _r1_o = n1;
    _r2.i = n2;
    global::com.codename1.testing.TestUtils.selectInList((global::org.xmlvm._nArrayAdapter<int>) _r1_o, (int) _r2.i);
    return;
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest: void selectInList(int[], int)]
}

public abstract bool runTest();

//XMLVM_BEGIN_WRAPPER[com.codename1.testing.AbstractTest]
//XMLVM_END_WRAPPER[com.codename1.testing.AbstractTest]

} // end of class: AbstractTest

} // end of namespace: com.codename1.testing
