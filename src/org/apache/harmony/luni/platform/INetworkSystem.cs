// Automatically generated by xmlvm2csharp (do not edit).

using org.xmlvm;
namespace org.apache.harmony.luni.platform {
public abstract class _iINetworkSystem {
public static int _fSOCKET_1CONNECT_1STEP_1START = 0;

public static int _fSOCKET_1CONNECT_1STEP_1CHECK = 1;


} // end of abstract class: _iINetworkSystem

public interface INetworkSystem {
 void accept(global::java.io.FileDescriptor n1, global::java.net.SocketImpl n2, global::java.io.FileDescriptor n3, int n4);

 void bind(global::java.io.FileDescriptor n1, global::java.net.InetAddress n2, int n3);

 int read(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4, int n5);

 int readDirect(global::java.io.FileDescriptor n1, long n2, int n3, int n4);

 int write(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4);

 int writeDirect(global::java.io.FileDescriptor n1, long n2, int n3);

 long writev(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<global::System.Object> n2, global::org.xmlvm._nArrayAdapter<int> n3, global::org.xmlvm._nArrayAdapter<int> n4, int n5);

 void setNonBlocking(global::java.io.FileDescriptor n1, bool n2);

 int connect(global::java.io.FileDescriptor n1, int n2, global::java.net.InetAddress n3, int n4);

 int connectWithTimeout(global::java.io.FileDescriptor n1, int n2, int n3, global::java.net.InetAddress n4, int n5, int n6, global::java.lang.Long n7);

 int sendDatagram(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4, int n5, bool n6, int n7, global::java.net.InetAddress n8);

 int sendDatagramDirect(global::java.io.FileDescriptor n1, long n2, int n3, int n4, int n5, bool n6, int n7, global::java.net.InetAddress n8);

 int receiveDatagram(global::java.io.FileDescriptor n1, global::java.net.DatagramPacket n2, global::org.xmlvm._nArrayAdapter<sbyte> n3, int n4, int n5, int n6, bool n7);

 int receiveDatagramDirect(global::java.io.FileDescriptor n1, global::java.net.DatagramPacket n2, long n3, int n4, int n5, int n6, bool n7);

 int recvConnectedDatagram(global::java.io.FileDescriptor n1, global::java.net.DatagramPacket n2, global::org.xmlvm._nArrayAdapter<sbyte> n3, int n4, int n5, int n6, bool n7);

 int recvConnectedDatagramDirect(global::java.io.FileDescriptor n1, global::java.net.DatagramPacket n2, long n3, int n4, int n5, int n6, bool n7);

 int peekDatagram(global::java.io.FileDescriptor n1, global::java.net.InetAddress n2, int n3);

 int sendConnectedDatagram(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4, bool n5);

 int sendConnectedDatagramDirect(global::java.io.FileDescriptor n1, long n2, int n3, int n4, bool n5);

 void disconnectDatagram(global::java.io.FileDescriptor n1);

 void createDatagramSocket(global::java.io.FileDescriptor n1, bool n2);

 void connectDatagram(global::java.io.FileDescriptor n1, int n2, int n3, global::java.net.InetAddress n4);

 int receiveStream(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4, int n5);

 void shutdownInput(global::java.io.FileDescriptor n1);

 void shutdownOutput(global::java.io.FileDescriptor n1);

 bool supportsUrgentData(global::java.io.FileDescriptor n1);

 void sendUrgentData(global::java.io.FileDescriptor n1, sbyte n2);

 int availableStream(global::java.io.FileDescriptor n1);

 void acceptStreamSocket(global::java.io.FileDescriptor n1, global::java.net.SocketImpl n2, global::java.io.FileDescriptor n3, int n4);

 void createServerStreamSocket(global::java.io.FileDescriptor n1, bool n2);

 void createStreamSocket(global::java.io.FileDescriptor n1, bool n2);

 void listenStreamSocket(global::java.io.FileDescriptor n1, int n2);

 void connectStreamWithTimeoutSocket(global::java.io.FileDescriptor n1, int n2, int n3, int n4, global::java.net.InetAddress n5);

 int sendDatagram2(global::java.io.FileDescriptor n1, global::org.xmlvm._nArrayAdapter<sbyte> n2, int n3, int n4, int n5, global::java.net.InetAddress n6);

 global::System.Object getSocketLocalAddress(global::java.io.FileDescriptor n1, bool n2);

 bool select(global::org.xmlvm._nArrayAdapter<global::System.Object> n1, global::org.xmlvm._nArrayAdapter<global::System.Object> n2, int n3, int n4, long n5, global::org.xmlvm._nArrayAdapter<int> n6);

 int getSocketLocalPort(global::java.io.FileDescriptor n1, bool n2);

 global::System.Object getSocketOption(global::java.io.FileDescriptor n1, int n2);

 void setSocketOption(global::java.io.FileDescriptor n1, int n2, global::java.lang.Object n3);

 int getSocketFlags();

 void socketClose(global::java.io.FileDescriptor n1);

 global::System.Object getHostByAddr(global::org.xmlvm._nArrayAdapter<sbyte> n1);

 global::System.Object getHostByName(global::java.lang.String n1, bool n2);

 void setInetAddress(global::java.net.InetAddress n1, global::org.xmlvm._nArrayAdapter<sbyte> n2);

 bool isReachableByICMP(global::java.net.InetAddress n1, global::java.net.InetAddress n2, int n3, int n4);

 global::System.Object inheritedChannel();

 void oneTimeInitialization(bool n1);

//XMLVM_BEGIN_WRAPPER[org.apache.harmony.luni.platform.INetworkSystem]
//XMLVM_END_WRAPPER[org.apache.harmony.luni.platform.INetworkSystem]

} // end of interface: INetworkSystem

} // end of namespace: org.apache.harmony.luni.platform
